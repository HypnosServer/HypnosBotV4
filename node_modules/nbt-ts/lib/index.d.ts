/// <reference types="node" />
import { Tag } from "./tag";
export * from "./tag";
export * from "./snbt";
export interface DecodeResult {
    name: string | null;
    value: Tag | null;
    length: number;
}
export interface DecodeOptions {
    /** Use ES6 `Map`s for compound tags instead of plain objects. */
    useMaps?: boolean;
    /** Whether the root tag has a name. */
    unnamed?: boolean;
}
/**
 * Decode a nbt tag from buffer.
 *
 * The result contains the decoded nbt value, the tag's name, if present,
 * and the length of how much was read from the buffer.
 */
export declare function decode(buffer: Buffer, options?: DecodeOptions): DecodeResult;
/**
 * Encode a nbt tag into a buffer.
 *
 * @param name Resulting tag will be unnamed if name is `null`.
 * @param tag If tag is `null`, only a zero byte is returned.
 */
export declare function encode(name: string | null, tag: Tag | null): Buffer;
