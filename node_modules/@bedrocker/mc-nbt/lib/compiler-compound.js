"use strict";
/* global ctx */
module.exports = {
    Read: {
        compound: ['context', function (buffer, offset) {
                var results = {
                    value: {},
                    size: 0
                };
                while (true) {
                    var typ = ctx.i8(buffer, offset);
                    if (typ.value === 0) {
                        results.size += typ.size;
                        break;
                    }
                    var readResults = ctx.nbt(buffer, offset);
                    offset += readResults.size;
                    results.size += readResults.size;
                    results.value[readResults.value.name] = {
                        type: readResults.value.type,
                        value: readResults.value.value
                    };
                }
                return results;
            }]
    },
    Write: {
        compound: ['context', function (value, buffer, offset) {
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        offset = ctx.nbt({
                            name: key,
                            type: value[key].type,
                            value: value[key].value
                        }, buffer, offset);
                    }
                }
                offset = ctx.i8(0, buffer, offset);
                return offset;
            }]
    },
    SizeOf: {
        compound: ['context', function (value) {
                var size = 1;
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        size += ctx.nbt({
                            name: key,
                            type: value[key].type,
                            value: value[key].value
                        });
                    }
                }
                return size;
            }]
    }
};
